// matr.h
#ifndef _MATR_LIBSAM
#define _MATR_LIBSAM

#include <stdio.h>

class Matr33
{
 public:
  double M[3][3];
  // These methods are generated by default
  //Default constructor (is generated automatically)
  //Matr33(void);
  //Constructor of copy (is generated automatically)
  //Matr33(const Matr33 &);

  void operator=(Matr33&); //Copies one matrix to the other
  Matr33 operator=(double d); //assigns a value to all elements
  double& C(unsigned i,unsigned j){return M[i][j];}
  double& operator()(unsigned i,unsigned j){return M[i][j];}
  Matr33 operator+(Matr33& );
  Matr33 operator-(Matr33& );
  Matr33 operator*(Matr33& );
  Matr33 operator*=(double );
  Matr33 operator/=(double );
  Matr33 operator+=(Matr33& );
  Matr33 operator-=(Matr33& );

  Matr33 Povernut(  short    // 1 - tomicro, 0 - tomacro
                   ,Matr33&  //Rotation matrix
                 );
  void Division(double);
  void Multiplication(double);
  void Matr33::Add_to_diagonal(double d);

  double Svertka(Matr33& );
  double Matr33::Norma(void);
  double SDevInt(void); //Matrix should be a deporoustor
  double EDevInt(void); //Matrix should be a deporoustor
  Real SIntensivityOn3Plane(void);
  void fpr1m(FILE*, const char* );
  void pr1m(const char* );
  void ftpr1m(FILE*, const char* );
  void frd1m(FILE*);

  friend Matr33 Komb(double, Matr33&, double, Matr33&);
};

#endif